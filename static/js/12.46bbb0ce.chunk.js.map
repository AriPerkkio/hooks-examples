{"version":3,"sources":["components/Stringify/Stringify.js","components/Stringify/index.js","components/MountToggle/MountToggle.js","components/MountToggle/index.js","components/UserCard/UserCard.js","components/UserCard/UserCardInvalidDependencies.js","components/Text/TextWithSubscription.js","components/Text/TextWithEffectsList.js","views/EffectView.js"],"names":["Stringify","children","indent","className","JSON","stringify","MountToggle","initialMounted","useReducer","s","mounted","toggleMounted","Button","onClick","UserCardInvalidDependencies","userId","useState","user","setUser","username","name","email","useEffect","Api","getUser","then","commentReducer","all","comment","TextWithSubscription","comments","addComment","subscribeComments","unsubscribeComments","commentCount","length","TextWithEffectsList","id","next","list","add","useLayoutEffect","map","text","key","EffectView","setId","CodeBlock","fileName","type","onChange","value","target","UserCard","Link","href"],"mappings":"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","file":"static/js/12.46bbb0ce.chunk.js","sourcesContent":["import React from 'react';\n\nconst Stringify = ({ children, indent, className }) => (\n    <pre className={`stringify ${className || ''}`}>\n        {JSON.stringify(children, null, indent)}\n    </pre>\n);\n\nexport default Stringify;\n","export { default } from './Stringify';\n","import React, { useReducer } from 'react';\n\nimport Button from 'components/common/Button';\n\nconst MountToggle = ({ initialMounted, children }) => {\n    const [mounted, toggleMounted] = useReducer(s => !s, !!initialMounted);\n\n    return (\n        <>\n            <Button onClick={toggleMounted}>\n                {mounted ? 'Unmount' : 'Mount'}\n            </Button>\n\n            {mounted && children}\n        </>\n    );\n};\n\nexport default MountToggle;\n","export { default } from './MountToggle';\n","import React, { useState, useEffect } from 'react';\n\nimport Api from 'api';\n\nconst UserCardInvalidDependencies = ({ userId }) => {\n    const [user, setUser] = useState();\n    const { username, name, email } = user || {};\n\n    useEffect(() => {\n        Api.getUser(userId).then(setUser);\n        return setUser; // Reset previous user\n    }, [userId]);\n\n    if (!user) {\n        return <h2>Loading...</h2>;\n    }\n\n    return (\n        <div>\n            <h2>\n                {userId}: {name} ({username})\n            </h2>\n            <h3>@ {email}</h3>\n        </div>\n    );\n};\n\nexport default UserCardInvalidDependencies;\n","import React, { useState, useEffect } from 'react';\n\nimport Api from 'api';\n\nconst UserCardInvalidDependencies = ({ userId }) => {\n    const [user, setUser] = useState();\n    const { username, name, email } = user || {};\n\n    useEffect(() => {\n        Api.getUser(userId).then(setUser);\n        return setUser; // Reset previous user\n    }, []); // eslint-disable-line\n\n    if (!user) {\n        return <h2>Loading...</h2>;\n    }\n\n    return (\n        <div>\n            <h2>\n                {userId}: {name} ({username})\n            </h2>\n            <h3>@ {email}</h3>\n        </div>\n    );\n};\n\nexport default UserCardInvalidDependencies;\n","import React, { useReducer, useEffect } from 'react';\n\nimport Stringify from 'components/Stringify';\nimport Api from 'api';\n\nconst commentReducer = (all, comment) => [...all, comment];\n\nconst TextWithSubscription = () => {\n    const [comments, addComment] = useReducer(commentReducer, []);\n\n    useEffect(() => {\n        Api.subscribeComments(addComment);\n        return () => Api.unsubscribeComments(addComment);\n    }, []);\n\n    return (\n        <Stringify indent={2}>{{ commentCount: comments.length }}</Stringify>\n    );\n};\n\nexport default TextWithSubscription;\n","import React, { useReducer, useEffect, useLayoutEffect } from 'react';\n\nconst TextWithEffectsList = ({ id }) => {\n    const [list, add] = useReducer((s, next) => [...s, next], []);\n\n    useEffect(() => add('useEffect onMount'), []);\n    useLayoutEffect(() => add('useLayoutEffect onMount'), []);\n\n    useEffect(() => {\n        add(`useEffect onIdChange ID:${id}`);\n        add('----------------------'); // hide-line\n        return () => add(`cleanup of useEffect onIdChange #1 ID:${id}`);\n    }, [id]);\n\n    useLayoutEffect(() => {\n        add(`useLayoutEffect onIdChange ID:${id}`);\n        return () => add(`cleanup of useLayoutEffect onIdChange ID:${id}`);\n    }, [id]);\n\n    return (\n        <ul className='text-effects-list block'>\n            {list.map((text, key) => (\n                <li key={key}>{text}</li>\n            ))}\n        </ul>\n    );\n};\n\nexport default TextWithEffectsList;\n","import React, { useState } from 'react';\n\nimport Link from 'components/Link';\nimport MountToggle from 'components/MountToggle';\nimport UserCard, { UserCardInvalidDependencies } from 'components/UserCard';\nimport { TextWithSubscription } from 'components/Text';\nimport { TextWithEffectsList } from 'components/Text';\nimport { CodeBlockButton } from 'components/CodeBlock';\nimport { ApiSubscribers } from 'api';\n\nconst EffectView = () => {\n    const [id, setId] = useState(1);\n\n    return (\n        <>\n            <h1>useEffect</h1>\n\n            <h2>onMount & onUnmount</h2>\n            <CodeBlockButton fileName='components/Text/TextWithSubscription.js' />\n\n            <MountToggle>\n                <div>\n                    <TextWithSubscription />\n                </div>\n            </MountToggle>\n            <ApiSubscribers />\n\n            <h2 className='margin-top-l'>Dependency array</h2>\n            <input\n                type='number'\n                className='common-input block margin-top-m'\n                onChange={({ target: { value } }) => setId(value)}\n                value={id}\n            />\n            <CodeBlockButton\n                fileName='components/UserCard/UserCardInvalidDependencies.js'\n                text='UserCardInvalidDependencies.js'\n            />\n            <MountToggle>\n                <UserCardInvalidDependencies userId={id} />\n            </MountToggle>\n\n            <div>\n                <CodeBlockButton\n                    fileName='components/UserCard/UserCard.js'\n                    text='UserCard.js'\n                />\n                <MountToggle>\n                    <UserCard userId={id} />\n\n                    <pre className='quote'>\n                        If you’re trying to write an effect that behaves\n                        differently depending on whether the component renders\n                        for the first time or not, you’re swimming against the\n                        tide! We’re failing at synchronizing if our result\n                        depends on the “journey” rather than the “destination”.\n                        <Link href='https://overreacted.io/a-complete-guide-to-useeffect/#synchronization-not-lifecycle'>\n                            overreacted.io/a-complete-guide-to-useeffect\n                        </Link>\n                    </pre>\n                </MountToggle>\n            </div>\n\n            <h2 className='margin-top-l'>useEffect, useLayoutEffect</h2>\n            <input\n                type='number'\n                className='common-input block margin-top-m'\n                onChange={({ target: { value } }) => setId(value)}\n                value={id}\n            />\n            <CodeBlockButton\n                fileName='components/Text/TextWithEffectsList.js'\n                text='Code: Order of effects and cleanups'\n            />\n            <MountToggle>\n                <TextWithEffectsList id={id} />\n            </MountToggle>\n        </>\n    );\n};\n\nexport default EffectView;\n"],"sourceRoot":""}