{"version":3,"sources":["components/Stringify/Stringify.js","components/Stringify/index.js","../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/typeof.js","../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/@babel/runtime/helpers/esm/inherits.js","components/Input/InputWithComponents.js","components/Input/InputWithHooks.js","components/Input/InputWithReducer.js","components/Input/InputWithStore.js","components/Input/InputWithShouldUpdate.js","components/Input/InputsWithResizer.js","components/Input/InputWithEventTarget.js","components/Input/InputWithPropsDependencies.js","components/Input/InputWithReducerAndProps.js","components/Input/InputWithHooksLazyInitialState.js","components/Input/index.js","components/MountToggle/MountToggle.js","components/MountToggle/index.js","components/RenderCountText/RenderCountText.js","components/RenderCountText/RenderCountWithUseCallback.js","components/RenderCountText/RenderCountWithUseMemo.js","components/RenderCountText/RenderCountWithClass.js","components/RenderCountText/RenderCountWithRef.js","views/PerformanceView.js"],"names":["Stringify","children","indent","className","JSON","stringify","_getPrototypeOf","o","Object","setPrototypeOf","getPrototypeOf","__proto__","_typeof2","obj","Symbol","iterator","constructor","prototype","_typeof","_possibleConstructorReturn","self","call","ReferenceError","_setPrototypeOf","p","_inherits","subClass","superClass","TypeError","create","value","writable","configurable","InputWithComponent","state","onChange","target","setState","type","this","Component","InputWithHook","useState","setValue","reducer","action","InputWithReducer","useReducer","dispatch","Button","onClick","memo","id","useStore","prevState","shouldComponentUpdate","newState","three","InputsWithResizer","displayMode","setDisplayMode","useWindowResize","width","href","InputWithEventTarget","useEventTargetValue","Input","s","enabled","toggle","useEffect","count","increase","args","doImportantBusinessLogic","InputWithReducerAndProps","userId","payload","loading","posts","length","comments","thunkDispatch","a","then","r","Api","getUsersPosts","getUsersComments","InputWithHooksLazyInitialState","MountToggle","initialMounted","mounted","toggleMounted","renderCounts","RenderCountText","text","RenderCountWithUseCallback","memoizedCallback","useCallback","alert","RenderCountWithUseMemo","generateText","useMemo","generateTextCallCounts","RenderCountWithClass","props","RenderCountWithUseRef","latestText","useRef","current","PerformanceView","classText","setClassText","cbText","setCbText","cbRefText","setCbRefText","memoText","setMemoText","useForceRender","CodeBlock","fileName"],"mappings":"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","file":"static/js/4.25e6eeeb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Stringify = ({ children, indent, className }) => (\n    <pre className={`stringify ${className || ''}`}>\n        {JSON.stringify(children, null, indent)}\n    </pre>\n);\n\nexport default Stringify;\n","export { default } from './Stringify';\n","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","function _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nexport default function _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}","import _typeof from \"../../helpers/esm/typeof\";\nimport assertThisInitialized from \"./assertThisInitialized\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","import setPrototypeOf from \"./setPrototypeOf\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import React, { Component } from 'react';\n\nimport Stringify from 'components/Stringify';\n\nclass InputWithComponent extends Component {\n    state = { value: 'Initial Value' };\n\n    onChange = ({ target: { value } }) => this.setState({ value });\n\n    render() {\n        return (\n            <>\n                <input\n                    type='text'\n                    value={this.state.value}\n                    onChange={this.onChange}\n                />\n                <Stringify>{this.state}</Stringify>\n            </>\n        );\n    }\n}\n\nexport default InputWithComponent;\n","import React, { useState } from 'react';\n\nimport Stringify from 'components/Stringify';\n\nconst InputWithHook = () => {\n    const [value, setValue] = useState('Initial Value');\n    const onChange = ({ target: { value } }) => setValue(value);\n\n    return (\n        <>\n            <input type='text' value={value} onChange={onChange} />\n            <Stringify>{{ value }}</Stringify>\n        </>\n    );\n};\n\nexport default InputWithHook;\n","import React, { useReducer } from 'react';\n\nimport Stringify from 'components/Stringify';\nimport Button from 'components/common/Button';\n\nconst initialState = 0;\nconst reducer = (state, action) => {\n    const { type, value } = action;\n\n    switch (type) {\n        case 'ADD':\n            return state + value;\n        case 'MINUS':\n            return state - value;\n        case 'MULTIPLY':\n            return state * value;\n        default:\n            return state;\n    }\n};\n\nconst InputWithReducer = () => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    return (\n        <>\n            <Button onClick={() => dispatch({ type: 'ADD', value: 15 })}>\n                ADD 15\n            </Button>\n\n            <Button onClick={() => dispatch({ type: 'MINUS', value: 23 })}>\n                MINUS 23\n            </Button>\n\n            <Button onClick={() => dispatch({ type: 'MULTIPLY', value: 3 })}>\n                MULTIPLY 3\n            </Button>\n\n            <Stringify>{state}</Stringify>\n        </>\n    );\n};\n\nexport default InputWithReducer;\n","import React, { memo } from 'react';\n\nimport Stringify from 'components/Stringify';\nimport Button from 'components/common/Button';\nimport { useStore } from 'hooks';\n\nconst InputWithStore = ({ id }) => {\n    const [state, setState] = useStore();\n    const onClick = () => setState(prevState => ({ [id]: !prevState[id] }));\n\n    return (\n        <>\n            <Button onClick={onClick}>setState</Button>\n            <Stringify>{state}</Stringify>\n        </>\n    );\n};\n\nexport default memo(InputWithStore);\n","import React, { memo } from 'react';\n\nimport Stringify from 'components/Stringify';\nimport Button from 'components/common/Button';\nimport { useStore } from 'hooks';\n\n// Update only when state.three updates\nconst shouldComponentUpdate = (prevState, newState) =>\n    prevState.three !== newState.three;\n\nconst InputWithShouldUpdate = ({ id }) => {\n    const [state, setState] = useStore({ shouldComponentUpdate });\n    const onClick = () => setState(prevState => ({ [id]: !prevState[id] }));\n\n    return (\n        <>\n            <Button onClick={onClick}>setState</Button>\n            <Stringify>{state}</Stringify>\n        </>\n    );\n};\n\nexport default memo(InputWithShouldUpdate);\n","import React, { useState } from 'react';\n\nimport { useWindowResize } from 'hooks';\n\nconst InputsWithResizer = () => {\n    const [displayMode, setDisplayMode] = useState('medium');\n\n    // No need to memoize callback\n    useWindowResize(width => setDisplayMode(width > 1400 ? 'large' : 'medium'));\n\n    return (\n        <nav className='sidebar-navigation'>\n            <a href='#front-page' className='sidebar-navigation-link'>\n                Company ABC\n            </a>\n\n            {/* Prevent forwarding mobile users to dashboard */}\n            {displayMode === 'large' && (\n                <a href='#dashboard' className='sidebar-navigation-link'>\n                    Dashboard\n                </a>\n            )}\n\n            <a href='#contact' className='sidebar-navigation-link'>\n                Contact us\n            </a>\n            <a href='#about' className='sidebar-navigation-link'>\n                About us\n            </a>\n        </nav>\n    );\n};\n\nexport default InputsWithResizer;\n","import React from 'react';\n\nimport Stringify from 'components/Stringify';\nimport { useEventTargetValue } from 'hooks';\n\nconst InputWithEventTarget = () => {\n    const [value, onChange] = useEventTargetValue('Initial value');\n\n    return (\n        <>\n            <input\n                type='text'\n                className='common-input block'\n                value={value}\n                onChange={onChange}\n            />\n            <Stringify>{value}</Stringify>\n        </>\n    );\n};\n\nexport default InputWithEventTarget;\n","import React, { memo, useReducer, useEffect } from 'react';\n\nimport Button from 'components/common/Button';\nimport { doImportantBusinessLogic } from 'utils';\n\nconst Parent = () => {\n    const [count, increase] = useReducer(s => s + 1, 0);\n\n    // Callback not memoized -> re-created on each render\n    const onChange = (...args) => {\n        doImportantBusinessLogic(args);\n        increase();\n    };\n\n    return (\n        <>\n            <h3>Rendered {count} times</h3>\n            <Input onChange={onChange} count={count} />\n        </>\n    );\n};\n\nconst Input = ({ onChange }) => {\n    const [enabled, toggle] = useReducer(s => !s, false);\n\n    // Dependency onChange not memoized -> infinite loop\n    useEffect(() => {\n        enabled && onChange('Some message from Input');\n    }, [enabled, onChange]);\n\n    return <Button onClick={toggle}>Toggle</Button>;\n};\n\nexport default memo(Parent);\n","import React, { useReducer } from 'react';\n\nimport Stringify from 'components/Stringify';\nimport Button from 'components/common/Button';\nimport Api from 'api';\n\nconst InputWithReducerAndProps = ({ userId }) => {\n    const [state, dispatch] = useReducer(reducer, {});\n\n    function reducer(prevState, action) {\n        const { type, payload } = action || {};\n\n        switch (type) {\n            case 'GET_POSTS':\n                return {\n                    ...prevState,\n                    loading: false,\n                    [userId]: {\n                        ...prevState[userId],\n                        posts: `Post count: ${payload.length}`,\n                    },\n                };\n            case 'GET_COMMENTS':\n                return {\n                    ...prevState,\n                    loading: false,\n                    [userId]: {\n                        ...prevState[userId],\n                        comments: `Comment count: ${payload.length}`,\n                    },\n                };\n            case 'LOADING':\n                return { ...prevState, loading: true };\n            default:\n                return prevState;\n        }\n    }\n\n    const thunkDispatch = async action => {\n        if (typeof action === 'function') {\n            action().then(r => dispatch(r));\n            return dispatch({ type: 'LOADING' });\n        }\n\n        return dispatch(action);\n    };\n\n    return (\n        <>\n            <Button\n                onClick={() =>\n                    thunkDispatch(() =>\n                        Api.getUsersPosts(userId).then(payload => ({\n                            payload,\n                            type: 'GET_POSTS',\n                        }))\n                    )\n                }>\n                GET /users/{userId}/posts\n            </Button>\n\n            <Button\n                onClick={() =>\n                    thunkDispatch(() =>\n                        Api.getUsersComments(userId).then(payload => ({\n                            payload,\n                            type: 'GET_COMMENTS',\n                        }))\n                    )\n                }>\n                GET /users/{userId}/comments\n            </Button>\n\n            <Stringify indent={2} className='block'>\n                {state}\n            </Stringify>\n        </>\n    );\n};\n\nexport default InputWithReducerAndProps;\n","import React, { useState } from 'react';\n\nimport Stringify from 'components/Stringify';\n\nconst InputWithHooksLazyInitialState = () => {\n    const [value, setValue] = useState(() => 2 * 10);\n    const onChange = ({ target: { value } }) => setValue(value);\n\n    return (\n        <>\n            <input type='text' value={value} onChange={onChange} />\n            <Stringify>{{ value }}</Stringify>\n        </>\n    );\n};\n\nexport default InputWithHooksLazyInitialState;\n","export { default as InputWithComponents } from './InputWithComponents';\nexport { default as InputWithHooks } from './InputWithHooks';\nexport { default as InputWithReducer } from './InputWithReducer';\nexport { default as InputWithStore } from './InputWithStore';\nexport { default as InputWithShouldUpdate } from './InputWithShouldUpdate';\nexport { default as InputsWithResizer } from './InputsWithResizer';\nexport { default as InputWithEventTarget } from './InputWithEventTarget';\nexport {\n    default as InputWithPropsDependencies,\n} from './InputWithPropsDependencies';\nexport {\n    default as InputWithReducerAndProps,\n} from './InputWithReducerAndProps';\nexport {\n    default as InputWithHooksLazyInitialState,\n} from './InputWithHooksLazyInitialState';\n","import React, { useReducer } from 'react';\n\nimport Button from 'components/common/Button';\n\nconst MountToggle = ({ initialMounted, children }) => {\n    const [mounted, toggleMounted] = useReducer(s => !s, !!initialMounted);\n\n    return (\n        <>\n            <Button onClick={toggleMounted}>\n                {mounted ? 'Unmount' : 'Mount'}\n            </Button>\n\n            {mounted && children}\n        </>\n    );\n};\n\nexport default MountToggle;\n","export { default } from './MountToggle';\n","import React, { memo } from 'react';\n\nconst BASE_CLASS = 'render-count-text';\nconst renderCounts = {};\n\nconst RenderCountText = memo(({ text, onClick }) => {\n    renderCounts[text] = (renderCounts[text] || 0) + 1;\n\n    return (\n        <div>\n            <span onClick={onClick} className={BASE_CLASS}>\n                {text}, rendered {renderCounts[text]} times\n            </span>\n        </div>\n    );\n});\n\nexport default RenderCountText;\n","import React, { useCallback } from 'react';\n\nimport RenderCountText from './RenderCountText';\n\nconst RenderCountWithUseCallback = ({ text }) => {\n    // Crete new function on every render\n    const inlineCallback = () => alert(text);\n\n    // Generate new method only when text changes\n    const memoizedCallback = useCallback(() => alert(text), [text]);\n\n    return (\n        <>\n            <RenderCountText onClick={inlineCallback} text='inlineCallback' />\n            <RenderCountText onClick={memoizedCallback} text='useCallback' />\n        </>\n    );\n};\n\nexport default RenderCountWithUseCallback;\n","import React, { useMemo } from 'react';\n\nimport Stringify from 'components/Stringify';\nimport { generateText, generateTextCallCounts } from 'utils';\n\nconst RenderCountWithUseMemo = ({ text }) => {\n    // Run on every render\n    // eslint-disable-next-line\n    const calculatedText = generateText(text, 'inline');\n\n    // Run only when text changes\n    // eslint-disable-next-line\n    const memoizedText = useMemo(() => generateText(text, 'useMemo'), [text]);\n\n    return (\n        <Stringify className='block small' indent={2}>\n            {{ generateTextCallCounts }}\n        </Stringify>\n    );\n};\n\nexport default RenderCountWithUseMemo;\n","import React, { Component } from 'react';\n\nimport RenderCountText from './RenderCountText';\n\nclass RenderCountWithClass extends Component {\n    onClick = () => alert(this.props.text);\n\n    render() {\n        return <RenderCountText onClick={this.onClick} text='class' />;\n    }\n}\n\nexport default RenderCountWithClass;\n","import React, { useCallback, useRef, useEffect } from 'react';\n\nimport RenderCountText from './RenderCountText';\n\nconst RenderCountWithUseRef = ({ text }) => {\n    const latestText = useRef(text);\n    const memoizedCallback = useCallback(() => alert(latestText.current), []);\n\n    // Update ref when text prop changes\n    useEffect(() => {\n        latestText.current = text;\n    }, [text]);\n\n    return (\n        <RenderCountText onClick={memoizedCallback} text='useCallback+useRef' />\n    );\n};\n\nexport default RenderCountWithUseRef;\n","import React, { useState } from 'react';\n\nimport {\n    RenderCountWithUseCallback,\n    RenderCountWithUseMemo,\n    RenderCountWithUseRef,\n    RenderCountWithClass,\n} from 'components/RenderCountText';\nimport { InputWithPropsDependencies } from 'components/Input';\nimport MountToggle from 'components/MountToggle';\nimport { CodeBlockButton } from 'components/CodeBlock';\nimport { useForceRender } from 'hooks';\n\nconst PerformanceView = () => {\n    const [classText, setClassText] = useState('Class text');\n    const [cbText, setCbText] = useState('useCallback text');\n    const [cbRefText, setCbRefText] = useState('useCallback+useRef text');\n    const [memoText, setMemoText] = useState('initial text');\n\n    useForceRender(2000);\n\n    return (\n        <>\n            <h1>Performance optimization hooks</h1>\n\n            <h3>Class</h3>\n            <input\n                type='text'\n                value={classText}\n                onChange={({ target: { value } }) => setClassText(value)}\n            />\n            <CodeBlockButton fileName='components/RenderCountText/RenderCountWithClass.js' />\n            <RenderCountWithClass text={classText} />\n\n            <h3>useCallback</h3>\n            <input\n                type='text'\n                value={cbText}\n                onChange={({ target: { value } }) => setCbText(value)}\n            />\n            <CodeBlockButton fileName='components/RenderCountText/RenderCountWithUseCallback.js' />\n            <RenderCountWithUseCallback text={cbText} />\n\n            <h3>useCallback + useRef</h3>\n            <input\n                type='text'\n                value={cbRefText}\n                onChange={({ target: { value } }) => setCbRefText(value)}\n            />\n            <CodeBlockButton fileName='components/RenderCountText/RenderCountWithRef.js' />\n            <RenderCountWithUseRef text={cbRefText} />\n\n            <h3>useMemo</h3>\n            <input\n                type='text'\n                value={memoText}\n                onChange={({ target: { value } }) => setMemoText(value)}\n            />\n            <CodeBlockButton fileName='components/RenderCountText/RenderCountWithUseMemo.js' />\n            <RenderCountWithUseMemo text={memoText} />\n\n            <h3>Dependency memoizing</h3>\n            <CodeBlockButton fileName='components/Input/InputWithPropsDependencies.js' />\n\n            <MountToggle>\n                <InputWithPropsDependencies />\n            </MountToggle>\n        </>\n    );\n};\n\nexport default PerformanceView;\n"],"sourceRoot":""}